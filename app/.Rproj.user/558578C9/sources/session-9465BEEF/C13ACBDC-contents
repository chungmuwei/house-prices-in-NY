#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#

library(shiny)
library(shinythemes)
library(ggplot2)
library(equatiomatic)


# Define UI for application that draws a histogram
ui <- fluidPage(
    themeSelector(),
    # Application title
    titlePanel("Predict house price"),

    # Sidebar with a slider input for number of bins 
    sidebarLayout(
        sidebarPanel(
            # input new data
            checkboxInput(
              inputId = "Waterfront",
              label = "Whether property includes waterfront"
            ),
            numericInput(
              inputId = "Land.Value",
              label = "Value of land (US dollars)",
              value = 35000,
              step = 1000,
              min = 0
            ),
            numericInput(
              inputId = "Living.Area",
              label = "Living area (square feet)",
              value = 1800,
              step = 100,
              min = 0
            ),
            numericInput(
              inputId = "Bathrooms",
              label = "Number of bathrooms (half bathrooms have no shower or tub)",
              min = 1,
              value = 2,
              step = 0.5,
            ),
            
            # Tuning predict method arguments
            # does not affect the standard error at all !!!
            # selectInput(
            #   inputId = "interval",
            #   label = "Type of interval",
            #   choices = c("confidence", "prediction"),
            #   selected = "confidence"
            # ),
            # numericInput(
            #   inputId = "level",
            #   label = "Tolerance/confidence level",
            #   min = 0,
            #   max = 1,
            #   value = 0.95,
            #   step = 0.01
            # )
        ),

        # Show a plot of the generated distribution
        mainPanel(
           h3("Our regression model to predict house price:"),
           withMathJax("$$\\operatorname{\\widehat{Price}} = 3136.91 + 123131.17(\\operatorname{Waterfront}_{\\operatorname{1}}) + 0.91(\\operatorname{Land.Value}) + 71.03(\\operatorname{Living.Area}) + 27058.46(\\operatorname{Bathrooms})$$"),
           helpText("\\(\\operatorname{Waterfront}_{\\operatorname{1}}\\) means property includes waterfront. I.e., if the property includes waterfront, \\(\\operatorname{Waterfront}_{\\operatorname{1}} = 1\\). Otherwise, \\(\\operatorname{Waterfront}_{\\operatorname{1}} = 0\\)"),
           h3("Guide"),
           p("Fill in the 4 attributes of a property to predict its price."),
           h3("Prediction"),
           uiOutput("predictedPrice")
        )
    )
)

# Define server logic required to draw a histogram
server <- function(input, output) {
    
    # reactive function to return the predicted price for the new data
    # if any of the input value is invalid, return FALSE
    predict_price <- reactive({
      
      new_obs = data.frame(
        Waterfront = if_else(input$Waterfront, "1", "0") , 
        Land.Value = input$Land.Value, 
        Living.Area = input$Living.Area, 
        Bathrooms = input$Bathrooms
      )
      
      pred = predict.lm(house_fit, new_obs, 
                        interval = input$interval, 
                        se.fit = TRUE, 
                        level = 0.95
                        )
      return(
        paste(
          format(round(pred$fit[1]), big.mark = ","), 
          format(round(pred$se.fit), big.mark = ","),
          sep = "Â±"
        )
      )
    })
    
    output$predictedPrice <- renderUI (
      if (!isTruthy(input$Land.Value)) {
        p("Value of Land is missing or not numeric.")
      } else if (input$Land.Value <= 0) {
        p("Value of Land must be positive.")
      } else if (!isTruthy(input$Living.Area)) {
        p("Living area is missing or not numeric.")
      } else if (input$Living.Area <= 0) {
        p("Living area must be positive.")
      } else if (!isTruthy(input$Bathrooms)) {
        p("Number of bathroom is missing or not numeric.")
      } else if (input$Bathrooms < 1) {
        p("Number of bathroom must be at least 1.")
      } else {
        withMathJax(sprintf("The predicted house price is \\(%s\\) US dollars.", predict_price()))  
      }
    )
}

# Run the application 
shinyApp(ui = ui, server = server)
