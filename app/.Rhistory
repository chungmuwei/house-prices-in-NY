shiny::runApp('predict-house-price')
# Read house data
house <- readr::read_tsv("data/housing-prices-ge19.txt")
# Read house data
house <- readr::read_tsv("data/housing-prices-ge19.txt")
# x = readr::read_tsv("data2x02-survey/data/clean.tsv")
x = readr::read_tsv("data/clean.tsv")
# Read house data
house <- readr::read_tsv("predict-house-price/data/housing-prices-ge19.txt")
View(house)
View(house)
setwd("./predict-house-price")
pwd
dir()
# Read house data
setwd("./predict-house-price")
house <- readr::read_tsv("data/housing-prices-ge19.txt")
# convert data types and remove Test column
house = house %>% mutate (
Waterfront = as.factor(Waterfront),
New.Construct = as.factor(New.Construct),
Central.Air = as.factor(Central.Air),
Fuel.Type = as.factor(Fuel.Type),
Heat.Type = as.factor(Heat.Type),
Sewer.Type = as.factor(Sewer.Type),
) %>% select(-Test)
library(tidyverse)
library(ggplot2)
# Read house data
setwd("./predict-house-price")
house <- readr::read_tsv("data/housing-prices-ge19.txt")
# convert data types and remove Test column
house = house %>% mutate (
Waterfront = as.factor(Waterfront),
New.Construct = as.factor(New.Construct),
Central.Air = as.factor(Central.Air),
Fuel.Type = as.factor(Fuel.Type),
Heat.Type = as.factor(Heat.Type),
Sewer.Type = as.factor(Sewer.Type),
) %>% select(-Test)
View(house)
# fit linear regression model
house_fit = lm(Price ~ Waterfront + Land.Value + Living.Area + Bathrooms, data = house)
runApp()
runApp()
summary(house_fit)
house_fit$model
house_fit
house_fit$coefficients
house_fit$coefficients %>% round(2)
runApp()
house_fit
house_fit$call
house_fit$coefficients
output$predictedPrice <- renderText(
# new data to predict
new_obs = data.frame(Waterfront = input$Waterfront, Land.Value = input$Land.Value,
Living.Area = input$Living.Area, Bathroom = input$Bathroom),
predict(house_fit)
)
runApp()
runApp()
runApp()
house_fit
new_obs = data.frame(Waterfront = 1 , Land.Value = 42000,
Living.Area = 2000, Bathrooms = 2)
output$predictedPrice <- renderPrint(
predict(house_fit, create_new_obs(), interval = "confidence", level = 0.90)
predict(house_fit, new_obs, interval = "confidence", level = 0.90)
View(new_obs)
output$predictedPrice <- renderPrint(
predict(house_fit, create_new_obs(), interval = "confidence", level = 0.90)
predict(house_fit, new_obs, interval = "confidence", level = 0.90)
predict(house_fit, new_obs, interval = "confidence", level = 0.90)
?predict
glimpse(house)
house$Waterfront
glimpse(house)
new_obs = data.frame(Waterfront = "1" , Land.Value = 42000,
Living.Area = 2000, Bathrooms = 2)
output$predictedPrice <- renderPrint(
predict(house_fit, create_new_obs(), interval = "confidence", level = 0.90)
predict(house_fit, new_obs, interval = "confidence", level = 0.90)
output$predictedPrice <- renderPrint(
predict(house_fit, create_new_obs(), interval = "confidence", level = 0.90)
predict(house_fit, new_obs, interval = "confidence", level = 0.90)
predict(house_fit, new_obs, interval = "confidence", level = 0.90)
View(new_obs)
predict(house_fit, new_obs, se.fit = T)
predict(house_fit, new_obs, interval = "p", se.fit = T)
predict(house_fit, new_obs, interval = "p", se.fit = T, type = "t")
predict(house_fit, new_obs, interval = "p", se.fit = T)
pred = predict.lm(house_fit, create_new_obs(), interval = "confidence", se.fit = TRUE)
pred = predict(house_fit, new_obs, interval = "p", se.fit = T)
pred$fit
pred$fit[1]
paste(1, 2)
?paste
Â±
runApp()
install.packages("equatiomatic")
extract_eq(house_fit)
library(equatiomatic)
extract_eq(house_fit)
withMathJax
?withMathJax
runApp()
glue("{extract_eq(house_fit)}")
glue
glue::glue("{extract_eq(house_fit)}")
runApp()
glue::glue("{extract_eq(house_fit)}")
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
glue::glue("{extract_eq(house_fit)}")
glue::glue("{extract_eq(house_fit, use_coefs = TRUE)}")
runApp()
runApp()
runApp()
1&0
1|0
1|1
1||1
?|
runApp()
runApp()
runApp()
is.null()
is.null(d)
is.null(NULL)
is.null(NaN)
runApp()
runApp()
runApp()
pred
pred = predict.lm(house_fit, new_obs, interval = "c", se.fit = T, level = 0.95)
pred
pred$se.fit
runApp()
new_obs[1,]
new_obs[1,] = c(0, 35000, 1800, 2)
runApp()
new_obs[1,]
pred = predict.lm(house_fit, new_obs, interval = "c", se.fit = T, level = 0.95)
pred
pred = predict.lm(house_fit, new_obs, interval = "c", se.fit = T, level = 0.99)
pred
pred = predict.lm(house_fit, new_obs, interval = "c", se.fit = T, level = 0.90)
pred
pred = predict.lm(house_fit, new_obs, interval = "c", se.fit = T, level = 0.9)
pred
pred = predict.lm(house_fit, new_obs, interval = "c", se.fit = T, level = 1)
pred
pred = predict.lm(house_fit, new_obs, interval = "p", se.fit = T, level = 0.95)
pred
runApp()
shiny::runApp('predict-house-price')
pred
runApp('predict-house-price')
# variables list
name(house)
colnames(house)
runApp('predict-house-price')
full_vars
runApp('predict-house-price')
runApp('predict-house-price')
# all house variables to fit model
full_vars = colnames(house)
# the variable our model used
default_vars = c("Waterfront", "Land.Value", "Living.Area", "Bathrooms")
runApp('predict-house-price')
runApp('predict-house-price')
source("~/Library/CloudStorage/OneDrive-TheUniversityofSydney(Students)/USyd/DATA2902/Assignments/GroupProject/CC901E2/app/predict-house-price/global.R", echo=TRUE)
runApp('predict-house-price')
runApp('predict-house-price')
gc()
shiny::runApp('predict-house-price')
runApp('predict-house-price')
runApp('predict-house-price')
runApp('predict-house-price')
runApp('predict-house-price')
runApp('predict-house-price')
runApp('predict-house-price')
runApp('predict-house-price')
Price ~ Waterfront + Land.Value + Living.Area + Bathrooms
Price ~ Waterfront + Land.Value + Living.Area + Bathrooms
"Price ~ Waterfront + Land.Value + Living.Area + Bathrooms"
runApp('predict-house-price')
runApp('predict-house-price')
runApp('predict-house-price')
runApp('predict-house-price')
lm_formula = "Price ~ "
vars = input$house_vars
vars = full_vars
for (i in 1:length(vars)) {
lm_formula =
paste(
lm_formula,
if_else(i < length(vars), vars[i] + " + ", vars[i])
)
}
for (i in 1:length(vars)) {
lm_formula =
paste(
lm_formula,
if_else(i < length(vars), vars[i] + " + ", vars[i])
)
}
for (i in 1:length(vars)) {
lm_formula =
paste(
lm_formula,
if_else(i < length(vars), paste(vars[i], "+", sep), vars[i])
)
}
for (i in 1:length(vars)) {
lm_formula =
paste(
lm_formula,
if_else(i < length(vars), paste(vars[i], "+"), vars[i])
)
}
lm_formula
house_fit = lm(lm_formula, data = house)
house_fit = lm("Price ~ Age + Lot.Size", data = house)
house_fit
full_vars
colnames(house)[!="Price"]
colnames(house)[2:]
olnames(house)[2:16]
colnames(house)[2:16]
runApp('predict-house-price')
runApp('predict-house-price')
lm_formula = full_vars
lm_formula
vars = full_vars
lm_formula = "Price ~"
for (i in 1:length(vars)) {
lm_formula =
paste(
lm_formula,
if_else(i < length(vars), paste(vars[i], "+"), vars[i])
)
}
return(lm(lm_formula, data = house))
lm_formula
lm(lm_formula, data = house)
runApp('predict-house-price')
extract_eq(lm(lm_formula, house))
runApp('predict-house-price')
extract_eq(house_model(), use_coefs = TRUE)
extract_eq(house_fit, use_coefs = TRUE)
withMathJax(extract_eq(house_fit, use_coefs = TRUE))
runApp('predict-house-price')
runApp('predict-house-price')
lm_formula
lm_formula
lm_formula
lm_formula
lm_formula
lm_formula
runApp('predict-house-price')
lm_formula
lm_formula
lm_formula
lm_formula
lm_formula
lm_formula
lm_formula
vars
length(vars)
1:length(vars)
runApp('predict-house-price')
runApp('predict-house-price')
lm(Price ~ 1, house)
extract_eq( lm(Price ~ 1, house))
extract_eq( lm(Price ~ 1, house), use_coefs = T)
extract_eq( lm(Price ~ 0, house), use_coefs = T)
extract_eq( lm(Price ~ "1", house), use_coefs = T)
null_model = lm(Price ~ 1, house)
null_model$coefficients
null_model$terms
null_model$terms[1]
class(null_model$terms)
null_model$terms.t
name(null_model)
summary(null_model)
summary(null_model)$call
null_model$call
runApp('predict-house-price')
new_obs = data.frame(
Waterfront = if_else(input$Waterfront, "1", "0") ,
Land.Value = input$Land.Value,
Living.Area = input$Living.Area,
Bathrooms = input$Bathrooms
)
new_obs = data.frame(
Waterfront = "0",
Land.Value = 35000,
Living.Area = 1800,
Bathrooms = 2,
)
new_obs
new_obs = data.frame(
Waterfront = "0",
Land.Value = 35000,
Living.Area = 1800,
Bathrooms = 2,
)
new_obs = data.frame(
Waterfront = "0",
Land.Value = 35000,
Living.Area = 1800,
Bathrooms = 2
)
new_obs = data.frame(
Rooms = 5
)
new_obs
new_obs = data.frame(
Waterfront = "0",
Land.Value = 35000,
Living.Area = 1800,
Bathrooms = 2
)
new_obs$Rooms = 5
new_obs
predict.lm(house_fit, new_obs, se.fit = T)
new_obs$Rooms = NULL
predict.lm(house_fit, new_obs, se.fit = T)
predict.lm(house_fit, new_obs, se.fit = F)
predict.lm(house_fit, new_obs, interval = "c", se.fit = F)
new_obs$Room
new_obs$Room = 5
predict.lm(house_fit, new_obs, interval = "c", se.fit = F)
new_obs$Room = 10
predict.lm(house_fit, new_obs, interval = "c", se.fit = F)
house_fit
new_obs$BathRoom = 10
new_obs$Bathroom = 10
predict.lm(house_fit, new_obs, interval = "c", se.fit = F)
new_obs
data.frame()
data.frame() %>% mutate ("r" = 1)
data.frame() %>% mutate ("rrrr" = c(1))
d = data.frame() %>% mutate ("rrrr" = c(1))
d
d = data.frame()
d
d = data.frame()
d %>% mutate ()
d
d$e = 3
View(house)
colnames(house)
head(house)
summary(house)
runApp('predict-house-price')
runApp('predict-house-price')
runApp('predict-house-price')
runApp('predict-house-price')
runApp('predict-house-price')
runApp('predict-house-price')
runApp('predicting-house-price')
lm(Price~, house)
m0 = lm(Price~1, house)
m0
extract_eq(m0)
?strsplit
strsplit(c("Price", "1"), "")
strsplit(c("Price", 1), "")
runApp('predicting-house-price')
runApp('predicting-house-price')
runApp('predicting-house-price')
grep("Price", m0)
grepl("Price", m0)
grep("Price", m0$call)
grepl("Price", m0$call)
m0$call
str(m0$call)
grepl("Price", str(m0$call))
grepl("Price", str(m0$call)) == F
m0$fitted.values
m0$terms
m0$model
m0$effects
m0$rank
m1 = lm(Price~.,house)
m`$rank
d
m1$rank
runApp('predicting-house-price')
m0
summary(m0)
runApp('predicting-house-price')
runApp('predicting-house-price')
runApp('predicting-house-price')
runApp('predicting-house-price')
colnames(house)[2:16]
house
full_vars
min(house$Bathrooms)
min(house$Bedrooms)
min(house$Rooms)
shiny::runApp('predicting-house-price')
"Land.Value" %in% default_vars
runApp('predicting-house-price')
runApp('predicting-house-price')
runApp('predicting-house-price')
input$Lot.Size
Q
runApp('predicting-house-price')
runApp('predicting-house-price')
runApp('predicting-house-price')
